{"name":"Trestle","tagline":"","body":"[![Build Status](https://travis-ci.org/my8bird/octoboard.png?branch=master)](https://travis-ci.org/my8bird/octoboard)\r\n\r\nGetting Started\r\n===============\r\n\r\nBuild It\r\n--------\r\n\r\n```bash\r\n# Install helpers\r\ngem install compass\r\n\r\n# Get the development deps\r\n#  (these will be placed in ./node_modules)\r\nnpm install\r\n\r\n# Get the client side deps\r\n#  (these are loaded into /vendor)\r\n./node_modules/.bin/bower install\r\n\r\n# Build the whole thing\r\n./node_modules/.bin/grunt\r\n```\r\n\r\nRun It\r\n------\r\n```bash\r\n# Open the index page in your browser\r\n# TODO: This doesn't work anymore...\r\nchromium-browser build/index.hmtl\r\n```\r\n\r\nUse It\r\n------\r\nXXX\r\n\r\nHost It\r\n-------\r\nThe entire project is static so to host it on a server all you need to do is place the contents of `/build` on a websever.\r\n\r\n\r\nDev\r\n===\r\nGet your environment setup by following the `Build It` steps.  Then \"Run It\" to verify that eveything good to go.  All of the source is stored in the `src` directory.  Javascript code is split into two locations.\r\n\r\n```\r\n# App Specific Code\r\n/src/app/**/*.js\r\n\r\n# Reusable Components (must not depend on app code)\r\n/src/common/**/*.js\r\n```\r\n\r\nEach module of code is responsible for it own styling, testing, templates, and javascript.  For example the login app has the following layout.\r\n\r\n```\r\n/src/app/login\r\n├── login.js\r\n├── login.spec.js\r\n├── login.scss\r\n└── login.tpl.html\r\n```\r\n\r\nAs you can see there is a Javascript file, a stylesheet file, and a template file.  Everything in one nice little spot.  If a module\r\n\r\n\r\nAdding a new module\r\n-----------------\r\n 1. Determine if it is an application specific function or does not depend on any pieces of the application.  Store in the `app` dir for former and `common` for the later.\r\n 1. Create the modules directory (name is not important but be sensible)\r\n 1. Add the Javascript, Spec, SASS, and template file as needed.\r\n   * If you are adding a new SASS file you must update `src/sass/main.scss` so that it can find it.  (examples in that file should make it obvious)\r\n 1. Go To Town (you might need to restart grunt)\r\n\r\n\r\nTODO\r\n====\r\n\r\n * all dragging items around\r\n * Moving user through routes\r\n   * After login straight to repo list or board depending on how you got there\r\n   * Bouncing the user to the login or home page if their creds are bad\r\n * Watch repo/issue events for updates\r\n * issue details panel\r\n * Think about mobile (how to move things around\r\n * Handle GitHub API errors (at least log them)\r\n * Add ability to store attributes on a pull\r\n * +2 in list\r\n * build status in list\r\n * logout\r\n * extend doc tool to show `@see`\r\n * extend doc tool to show `@private` flag\r\n\r\n * Add styling\r\n\r\nReferences\r\n==========\r\n * The project layout and structure is based upon\r\n   https://github.com/joshdmiller/ng-boilerplate.\r\n   See that project for more description on the *why* of the layout.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}